extern crate JonesLib;
use JonesLib::Messaging::Messaging::*;

extern crate magnetic;
use std::thread::spawn;
use std::thread;
use magnetic::spsc::spsc_queue;
use magnetic::buffer::dynamic::DynamicBuffer;
use magnetic::{Producer, Consumer};
use std::time::Duration;

extern crate i2cdev;
use i2cdev::core::*;
use i2cdev::linux::{LinuxI2CDevice, LinuxI2CError};

const SLAVE_ADDR: u16 = 0x04;


extern crate spidev;
use spidev::{Spidev, SpidevOptions, SPI_MODE_0};
use spidev::spidevioctl::SpidevTransfer;
use std::io;
use std::mem;

use std::net::{TcpListener, Shutdown};
use std::io::Read;


fn create_spi() -> io::Result<Spidev>{
	let mut spidev = Spidev::open("/dev/spidev0.0").unwrap();
    let options = SpidevOptions::new()
                      .bits_per_word(8)
                      .max_speed_hz(5000)
                      .lsb_first(false)
                      .mode(SPI_MODE_0)
                      .build();
    try!(spidev.configure(&options));
    Ok(spidev)
}

fn send_via_i2c(i2cdev : &mut LinuxI2CDevice, msg : &Vec<u8>){
    for byte in msg.iter() {
		match (*i2cdev).smbus_write_byte_data(0x04, *byte){
			Ok(_) => continue,
			Err(e)=> println!("{:?}", e)
		}

	thread::sleep(Duration::from_millis(10));
	}
}


fn receive_msg(mut stream : &std::net::TcpStream ) -> Option<String>{

    let mut ret_str  = String::new();
    let mut buffer = [0; 50];

    match stream.read(&mut buffer) {

        Err(e) => {
            println!("{:?} {}", e, line!());
            None
            },
        Ok(_) => {
            for i in buffer.iter()
            {
            	{
            		print!("{:?}", *i as char);
            	}
                if *i != 0 as u8
                {
                    ret_str.push(*i as char);
                }
            }
            println!("{:?}", line!() );

            if ret_str.len() > 0
            {
                Some(ret_str)
            }
            else
            {
                None
            }
        }
    }
}

fn push_to_thread(spi_p : &Producer<Vec<u8>>, i2c_p : &Producer<Vec<u8>>, msg : Message) {
	match msg {
		Message::digital{ref interface, ref pin, ref mode, ref action} => {
			match interface as &str{
				"spi" => {
							spi_p.
							spi_p.push(msg.to_msg_vec()).unwrap();

							}, // the unwrap should eventually be handled
				"i2c" => i2c_p.push(msg.to_msg_vec()).unwrap(),

				_ => println!("interface unspecified")
			}
		},
		Message::servo{ref interface, ref pin, ref action} => {
			match interface as &str{
				"spi" => spi_p.push(msg.to_msg_vec()).unwrap(), // the unwrap should eventually be handled
				"i2c" => i2c_p.push(msg.to_msg_vec()).unwrap(),
				_ => println!("interface unspecified")
			}
		},
		Message::dcmove{ref interface, ref direction, ref speed} => {
			match interface as &str {
				"spi" => spi_p.push(msg.to_msg_vec()).unwrap(),
				"i2c" => i2c_p.push(msg.to_msg_vec()).unwrap(),
				_ => println!("interface unspecified")
			}
		}
		_ => println!("Error Not analog or lcd is not implemented {:?} {:?}", msg, line!())
		// all these prints will eventually be switched to error output
	}
}

fn main() {
    let spidev = create_spi().unwrap();
	let mut i2c_dev = LinuxI2CDevice::new("/dev/i2c-1", SLAVE_ADDR).unwrap();


	let (spi_p, spi_c) = spsc_queue(DynamicBuffer::new(32).unwrap());
	let (i2c_p, i2c_c) = spsc_queue(DynamicBuffer::new(32).unwrap());

	// i2c thread
	let _i2c = spawn(move || {
	    loop {
	        let i2c_buf : Option<Vec<u8>> = match i2c_c.pop() {
				Ok(n) => Some(n),
				Err(e) => {
					println!("i2c badd input {:?} {:?}", e, line!());
					None
					}

			};

	        println!("i2c Consumed {:?}", i2c_buf);
			match i2c_buf{
	        	Some(ref i2c_buf) => send_via_i2c(&mut i2c_dev, i2c_buf),
				None => continue
			}
		}
	});

	// spi thread
	let _spi = spawn(move || {
	    loop {
	        let spi_buf : Option<Vec<u8>> =
			match spi_c.pop() {
	        	Ok(spi_buf) =>{
					println!("spi Consumed {:?}", spi_buf);
					Some(spi_buf)
				},
				Err(e) => {
					println!("spi badd input {:?} {:?}", e, line!());
					None
				}
	    	};
			match spi_buf {
    			Some(ref buf) =>{
					let mut trans = SpidevTransfer::write( &buf[..]);
					println!("{:?}", spidev.transfer(&mut trans));
				},
				None => continue
			}
		}
		});

	let listener : TcpListener = match TcpListener::bind("0.0.0.0:8080") {
                Ok(s) => s,
                Err(e)=> {println!("you done gooffed {:?}", e);
                            return;}
    };

	// main thread
    loop {
		match listener.accept() {
			Ok((mut _socket, addr)) => {
				println!("new client: {:?}", addr);
				// setting a green led would be nice here
				loop{
					match receive_msg(&_socket) {
						Some(strr) =>{
							println!("{:?} {}",&strr, line!());
							push_to_thread(&spi_p, &i2c_p, parser(&String::from(strr)));
						}
						None => {
							println!("none");
							break;
						}
					};
				}
				match _socket.shutdown(Shutdown::Both){
					Ok(r) => println!("socket shut down {:?}", r),
					Err(e)=> println!("{:?}", e)
				}
			},
			Err(e) => println!("couldn't get client: {:?}", e),
		}
	}
}
